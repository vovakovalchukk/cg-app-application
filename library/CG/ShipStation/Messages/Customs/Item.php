<?php
namespace CG\ShipStation\Messages\Customs;

use CG\Order\Shared\Courier\Label\OrderItemsData;
use CG\Order\Shared\Courier\Label\OrderItemsData\ItemData;
use CG\Order\Shared\Item\Entity as OrderItem;
use CG\Order\Shared\Entity as Order;
use CG\OrganisationUnit\Entity as OrganisationUnit;

class Item
{
    protected const COUNTRY_CODE_GB = 'GB';
    protected const CURRENCY_CODE_GBP = 'GBP';

    /** @var string */
    protected $description;
    /** @var int */
    protected $quantity;
    /** @var float */
    protected $value;
    /** @var string */
    protected $countryOfOrigin;
    /** @var string|null */
    protected $harmonizedTariffCode;
    /** @var string|null */
    protected $id;

    public function __construct(
        string $description,
        int $quantity,
        float $value,
        string $countryOfOrigin,
        ?string $harmonizedTariffCode = null,
        ?string $id = null
    ) {
        $this->description = $description;
        $this->quantity = $quantity;
        $this->value = $value;
        $this->countryOfOrigin = $countryOfOrigin;
        $this->harmonizedTariffCode = $harmonizedTariffCode;
        $this->id = $id;
    }

    public static function createFromOrderItem(
        OrderItem $orderItem,
        ItemData $itemData,
        OrganisationUnit $ou,
        Order $order
    ): self {

        $itemPrice = $orderItem->getIndividualItemPrice();
        if ($order->getCurrencyCode() != static::CURRENCY_CODE_GBP &&  $ou->getAddressCountryCode() == static::COUNTRY_CODE_GB) {
            $itemPrice = number_format($orderItem->getIndividualItemPrice() / $order->getExchangeRate(),2);
        }

        return new self(
            $orderItem->getItemName(),
            $orderItem->getItemQuantity(),
            $itemPrice,
            $itemData->getCountryOfOrigin() ?? $ou->getAddressCountryCode(),
            $itemData->getHarmonisedSystemCode()
        );
    }

    public function toArray(): array
    {
        $array = [
            'description' => $this->getDescription(),
            'quantity' => $this->getQuantity(),
            'value' => $this->getValue(),
            'country_of_origin' => $this->getCountryOfOrigin(),
            // Note: id is never sent, only ever generated by ShipEngine
        ];
        // ShipEngine doesnt handle null values
        if ($this->getHarmonizedTariffCode()) {
            $array['harmonized_tariff_code'] = $this->getHarmonizedTariffCode();
        }
        return $array;
    }

    public function getDescription(): string
    {
        return $this->description;
    }

    public function getQuantity(): int
    {
        return $this->quantity;
    }

    public function getValue(): float
    {
        return $this->value;
    }

    public function getCountryOfOrigin(): string
    {
        return $this->countryOfOrigin;
    }

    public function getHarmonizedTariffCode(): ?string
    {
        return $this->harmonizedTariffCode;
    }

    public function getId(): ?string
    {
        return $this->id;
    }
}